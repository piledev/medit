[{"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/index.tsx":"1","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/reportWebVitals.ts":"2","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/StackHeatmap.tsx":"3","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Profile.tsx":"4","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/AppBar.tsx":"5","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Recorder.tsx":"6","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Timer.tsx":"7"},{"size":694,"mtime":1610410909720,"results":"8","hashOfConfig":"9"},{"size":459,"mtime":1609022812124,"results":"10","hashOfConfig":"9"},{"size":1482,"mtime":1607560037823,"results":"11","hashOfConfig":"9"},{"size":454,"mtime":1610364883123,"results":"12","hashOfConfig":"9"},{"size":5647,"mtime":1607726713334,"results":"13","hashOfConfig":"9"},{"size":4333,"mtime":1609640759679,"results":"14","hashOfConfig":"9"},{"size":2920,"mtime":1610496185396,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"zaomb6",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/index.tsx",["35","36"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport AppBar from \"./AppBar\";\nimport Profile from \"./Profile\";\nimport Recorder from \"./Recorder\";\nimport Timer from \"./Timer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppBar />\n    {/* <Profile /> */}\n    {/* <Recorder /> */}\n    <Timer hour={0} minute={0} second={10} prepSecond={5} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["37","38"],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/reportWebVitals.ts",["39"],"import { report } from 'process';\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/StackHeatmap.tsx",[],["40","41"],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Profile.tsx",[],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/AppBar.tsx",[],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Recorder.tsx",["42"],"import React, { useState } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Slider,\n  Input,\n  Button,\n  Switch,\n} from \"@material-ui/core\";\n/* import CheckIcon from \"@material-ui/icons/Check\"; */\nimport \"./Recorder.css\";\n\nfunction valuetext(value: number) {\n  return `${value} minute`;\n}\n\nexport default function Recorder() {\n  return (\n    <div className=\"recorder\">\n      <Typography id=\"Settings-label\" variant=\"h3\" component=\"h3\" gutterBottom>\n        Settings\n      </Typography>\n      <Typography\n        id=\"meditation-label\"\n        variant=\"h5\"\n        component=\"h5\"\n        gutterBottom\n      >\n        Meditation time\n      </Typography>\n      <InputSlider label=\"hour\" step={1} max={23} default={0} />\n      <InputSlider label=\"min.\" step={1} max={59} default={15} />\n      <Typography\n        id=\"preparation-label\"\n        variant=\"h5\"\n        component=\"h5\"\n        gutterBottom\n      >\n        Preparation time\n      </Typography>\n      <InputSlider label=\"sec.\" step={1} max={59} default={5} />\n      <Typography\n        id=\"preparation-label\"\n        variant=\"h5\"\n        component=\"h5\"\n        gutterBottom\n      >\n        Notification\n      </Typography>\n      <AlarmSwitch />\n      <h1> </h1>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <SettingRecordButton />\n        </Grid>\n        <Grid item>\n          <ChangeModeButton />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nfunction SettingRecordButton() {\n  const [state, setState] = useState(false);\n\n  return (\n    <Button variant=\"contained\" onClick={() => setState((m) => !m)}>\n      Save to presets\n    </Button>\n  );\n}\n\nfunction ChangeModeButton() {\n  const [mode, setMode] = useState(false);\n\n  return (\n    <Button variant=\"contained\" onClick={() => setMode((m) => !m)}>\n      {mode ? \"Settings\" : \"Meditate\"}\n    </Button>\n  );\n}\n\n// function InputSlider(minvalue: number = 0, maxvalue: number = 59, stepValue: number = 1) {\nconst InputSlider = (props: any) => {\n  const [value, setValue] = React.useState(props.default);\n\n  const handleSliderChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event: any) => {\n    setValue(event.target.value === \"\" ? 0 : Number(event.target.value));\n  };\n\n  const handleBlur: any = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > props.max) {\n      setValue(props.max);\n    }\n  };\n\n  return (\n    <div className=\"slider\">\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={1}>\n          <Typography\n            id=\"inputsliderlabel\"\n            variant=\"h6\"\n            gutterBottom\n            align=\"right\"\n          >\n            {props.label}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Input\n            className=\"input\"\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: props.step,\n              min: 0,\n              max: props.max,\n              type: \"number\",\n              \"aria-labelledby\": \"input-slider\",\n            }}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            defaultValue={props.default}\n            getAriaValueText={valuetext}\n            valueLabelDisplay=\"auto\"\n            step={props.step}\n            min={0}\n            max={props.max}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nfunction AlarmSwitch() {\n  const [isAlarmOn, setIsAlarmOn] = React.useState(false);\n\n  const handleChange = (event: any) => {\n    setIsAlarmOn((i) => !i);\n  };\n\n  return (\n    <div className=\"switch\">\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <Typography\n            id=\"inputsliderlabel\"\n            variant=\"h6\"\n            gutterBottom\n            align=\"right\"\n          >\n            sound\n          </Typography>\n        </Grid>\n        <Switch\n          checked={isAlarmOn}\n          onChange={handleChange}\n          color=\"primary\"\n          name=\"checked\"\n          inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        />\n      </Grid>\n    </div>\n  );\n}\n","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Timer.tsx",["43","44","45","46"],{"ruleId":"47","severity":1,"message":"48","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":15},{"ruleId":"47","severity":1,"message":"51","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":16},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"47","severity":1,"message":"56","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":16},{"ruleId":"52","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},{"ruleId":"47","severity":1,"message":"59","line":65,"column":10,"nodeType":"49","messageId":"50","endLine":65,"endColumn":15},{"ruleId":"47","severity":1,"message":"60","line":2,"column":10,"nodeType":"49","messageId":"50","endLine":2,"endColumn":14},{"ruleId":"47","severity":1,"message":"61","line":3,"column":10,"nodeType":"49","messageId":"50","endLine":3,"endColumn":17},{"ruleId":"47","severity":1,"message":"62","line":29,"column":21,"nodeType":"49","messageId":"50","endLine":29,"endColumn":33},{"ruleId":"63","severity":1,"message":"64","line":42,"column":6,"nodeType":"65","endLine":42,"endColumn":16,"suggestions":"66"},"@typescript-eslint/no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'Recorder' is defined but never used.","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"'report' is defined but never used.",["67"],["68"],"'state' is assigned a value but never used.","'Grid' is defined but never used.","'display' is defined but never used.","'setIsStopped' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isStopped'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [isStopped, timeLeft]",{"range":"72","text":"73"},[1212,1222],"[isStopped, timeLeft]"]