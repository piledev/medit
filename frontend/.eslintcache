[{"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/index.tsx":"1","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/reportWebVitals.ts":"2","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/StackHeatmap.tsx":"3","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Profile.tsx":"4","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/AppBar.tsx":"5","/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Recorder.tsx":"6"},{"size":539,"mtime":1607725894691,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1607208759093,"results":"9","hashOfConfig":"8"},{"size":1482,"mtime":1607560037823,"results":"10","hashOfConfig":"8"},{"size":421,"mtime":1607560104528,"results":"11","hashOfConfig":"8"},{"size":5647,"mtime":1607726713334,"results":"12","hashOfConfig":"8"},{"size":3856,"mtime":1608202371379,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"zaomb6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/index.tsx",[],["30","31"],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/reportWebVitals.ts",[],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/StackHeatmap.tsx",[],["32","33"],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Profile.tsx",[],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/AppBar.tsx",[],["34","35"],"/Users/jumpei/go/1.15.2/src/github.com/yokoyamada/medit/frontend/src/Recorder.tsx",["36"],"import React, { useState } from 'react'\nimport { Grid, Typography, Slider, Input, Button } from '@material-ui/core';\n// import MuiIcons from '@material-ui/icons';\nimport './Recorder.css';\n\nfunction valuetext(value: number) {\n    return `${value} minute`;\n}\n\nexport default function Recorder() {\n    return (\n        <div className=\"recorder\">\n            <Typography id=\"Settings-label\" variant=\"h3\" component=\"h3\" gutterBottom>\n                Settings\n            </Typography>\n            <Typography id=\"meditation-label\" variant=\"h5\" component=\"h5\" gutterBottom>\n                Meditation time\n            </Typography>\n            <InputSlider label=\"H\" step={1} max={23} default={0} />\n            <InputSlider label=\"M\" step={1} max={59} default={15} />\n            <InputSlider label=\"S\" step={1} max={59} default={0} />\n\n            <Typography id=\"preparation-label\" variant=\"h5\" component=\"h5\" gutterBottom>\n                Preparation time\n            </Typography>\n            <InputSlider label=\"S\" step={1} max={59} default={5} />\n            <h1> </h1>\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item >\n                    <SettingRecordButton />\n                </Grid>\n                <Grid item>\n                    <ChangeModeButton />\n                </Grid>\n            </Grid>\n        </div>\n    )\n};\n\n\nfunction SettingRecordButton() {\n    const [state, setState] = useState(false);\n\n    return <Button variant=\"contained\" onClick={() => setState((m) => !m)}>Save to presets</Button>\n}\n\nfunction ChangeModeButton() {\n    const [mode, setMode] = useState(false);\n\n    return <Button variant=\"contained\" onClick={() => setMode((m) => !m)}>{mode ? \"Settings\" : \"Meditate\"}</Button>\n}\n\n// function InputSlider(minvalue: number = 0, maxvalue: number = 59, stepValue: number = 1) {\nconst InputSlider = (props: any) => {\n    const [value, setValue] = React.useState(props.default);\n\n    const handleSliderChange = (event: any, newValue: any) => {\n        setValue(newValue);\n    };\n\n    const handleInputChange = (event: any) => {\n        setValue(event.target.value === '' ? 0 : Number(event.target.value));\n    };\n\n    const handleBlur: any = () => {\n        if (value < 0) {\n            setValue(0);\n        } else if (value > props.max) {\n            setValue(props.max);\n        }\n    }\n\n    return (\n        <div className=\"slider\">\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={1}>\n                    <Typography id=\"inputsliderlabel\" variant=\"h6\" gutterBottom align=\"right\">{props.label}</Typography>\n                </Grid>\n                <Grid item>\n                    <Input\n                        className=\"input\"\n                        value={value}\n                        margin=\"dense\"\n                        onChange={handleInputChange}\n                        onBlur={handleBlur}\n                        inputProps={{\n                            step: props.step,\n                            min: 0,\n                            max: props.max,\n                            type: 'number',\n                            'aria-labelledby': 'input-slider',\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={4}>\n                    <Slider\n                        value={typeof value === 'number' ? value : 0}\n                        onChange={handleSliderChange}\n                        aria-labelledby=\"input-slider\"\n                        defaultValue={props.default}\n                        getAriaValueText={valuetext}\n                        valueLabelDisplay=\"auto\"\n                        step={props.step}\n                        min={0}\n                        max={props.max}\n                    />\n                </Grid>\n            </Grid>\n\n\n        </div>\n    )\n}",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"37","replacedBy":"41"},{"ruleId":"39","replacedBy":"42"},{"ruleId":"37","replacedBy":"43"},{"ruleId":"39","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":42,"column":12,"nodeType":"47","messageId":"48","endLine":42,"endColumn":17},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],["49"],["50"],["49"],["50"],"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]